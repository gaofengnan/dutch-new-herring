p.value.1 <- t.test(x,y, paired = TRUE
, alternative="two.sided")$p.value
calc.T <- function(x,y) {
return((mean(x) - mean(y))^2 +
abs(var(x) - var(y)))
}
T_obs <- calc.T(x,y)
xy <- rbind(x,y)
perm.size <- 10000
# now we resample
T_rs <- rep(-100, perm.size)
for (perm in 1:perm.size) {
xy_rs <- sample(xy,
size=length(xy), replace=FALSE)
T_rs[perm] <-
calc.T(xy_rs[1:n], xy_rs[(n+1):(2*n)])
}
p.value.2 <- sum(T_rs> T_obs) / perm.size
print(p.value.1)
print(p.value.2)
N <- 1000;  n <- 100
set.seed(100)
moments <- mls <- rep(0, N)
theta.0 <- 3
x <- rexp(n*N)*
(2*rbinom(n*N,1,0.5)-1)+theta.0
x <- matrix(x, nrow=n)
moments <- apply(x,2,mean)
mls <- apply(x,2,median)
mse.moments <- mean((moments-theta.0)^2)
mse.mls = mean((mls - theta.0)^2)
print(mse.mls/mse.moments)
x <- x[,1]
y <- rnorm(n) + theta.0
p.value.1 <- t.test(x,y, paired = TRUE
, alternative="two.sided")$p.value
calc.T <- function(x,y) {
return((mean(x) - mean(y))^2 +
abs(var(x) - var(y)))
}
T_obs <- calc.T(x,y)
xy <- rbind(x,y)
perm.size <- 10000
# now we resample
T_rs <- rep(-100, perm.size)
for (perm in 1:perm.size) {
xy_rs <- sample(xy,
size=length(xy), replace=FALSE)
T_rs[perm] <-
calc.T(xy_rs[1:n], xy_rs[(n+1):(2*n)])
}
p.value.2 <- sum(T_rs> T_obs) / perm.size
print(p.value.1)
print(p.value.2)
help(sample)
qt(0.95,18)
X <- 5
n <- 250
p.hat <- X/n
T <- (p.hat - 0.035)/sqrt(p.hat*(1-p.hat)*n)
T
devtools::install_github("gaofengnan/charcoal")
??charcoal
devtools::install_github("gaofengnan/charcoal")
devtools::install_github("gaofengnan/charcoal")
??charcoal
install.packages("gcookbook")
library(tidyverse)
library(gcookbook)
n <- 12000; p <- 10000; k <- 10
rho <- 0; tau <- 0.3
ret <- charcoal::simulateMultiCP(n,tau,p,k,rho)
n <- 1200; p <- 1000; k <- 10
rho <- 0; tau <- 0.3
ret <- charcoal::simulateMultiCP(n,tau,p,k,rho)
X <- ret$X; Y<- ret$Y
t(X) %*% X
n <- 1200; p <- 1000; k <- 10
rho <- 0; tau <- 0.3
ret <- charcoal::simulateMultiCP(n,tau,p,k,rho, sigma=10)
X <- ret$X; Y<- ret$Y
b <- ret$beta[,2]
lm1 <- lm(Y~X-1)
b_h <- coefficients(lm1)
ret <- charcoal::simulateMultiCP(n,tau,p,k,rho, sigma=2)
X <- ret$X; Y<- ret$Y
b <- ret$beta[,2]
lm1 <- lm(Y~X-1)
b_h <- coefficients(lm1)
max(abs(b_h-b))
n <- 1200; p <- 1000; k <- 10
rho <- 0; tau <- 0.3
ret <- charcoal::simulateMultiCP(n,tau,p,k,rho, design='t10', error='t4',
sigma=2)
X <- ret$X; Y<- ret$Y
b <- ret$beta[,2]
lm1 <- lm(Y~X-1)
b_h <- coefficients(lm1)
max(abs(b_h-b))
S <- t(X) %*% X
S
View(S)
mean(abs(b_h -b))
S <- inv(t(X) %*% X) * 4
S <- ginv(t(X) %*% X) * 4
S <- solve(t(X) %*% X) * 4
View(S)
View(S)
max(abs(b_h-b))
factor <- 2
n <- 1200*factor; p <- 1000*factor; k <- 10
rho <- 0; tau <- 0.3
ret <- charcoal::simulateMultiCP(n,tau,p,k,rho, design='t10', error='t4',
sigma=2)
X <- ret$X; Y<- ret$Y
b <- ret$beta[,2]
lm1 <- lm(Y~X-1)
b_h <- coefficients(lm1)
max(abs(b_h-b))
mean(abs(b_h -b))
factor <- 0.5
n <- 1200*factor; p <- 1000*factor; k <- 10
rho <- 0; tau <- 0.3
ret <- charcoal::simulateMultiCP(n,tau,p,k,rho, design='t10', error='t4',
sigma=2)
X <- ret$X; Y<- ret$Y
b <- ret$beta[,2]
lm1 <- lm(Y~X-1)
b_h <- coefficients(lm1)
max(abs(b_h-b))
mean(abs(b_h -b))
S <- solve(t(X) %*% X) * 4
factor <- 0.5
n <- 1200*factor; p <- 1000*factor; k <- 10
rho <- 0; tau <- 0.3
ret <- charcoal::simulateMultiCP(n,tau,p,k,rho, design='t10', error='t4',
sigma=2)
X <- ret$X; Y<- ret$Y
b <- ret$beta[,2]
lm1 <- lm(Y~X-1)
b_h <- coefficients(lm1)
max(abs(b_h-b))
mean(abs(b_h -b))
S <- solve(t(X) %*% X) * 4
install.packages("nloptr")
library(nloptr)
??nloptr
library(dplyr) # not needed, but used in examples below
# library(cbsodataR)
source('./maps.R')
# cbs_toc <- cbs_get_toc()
# datasets <- cbs_get_datasets()
#
# datasets %>%
#   filter(Language == "en") %>% # only English tables
#   select(Identifier, ShortTitle)
#
# regional_key_figures <- cbsodata4::cbs4_get_data("70072ned")
# tmp <- read_delim("dutch_municipality_2016_area.txt",delim = " ")
# print(tmp[,1])
#
# write.csv(tmp[,1], file = 'area.csv',row.names=FALSE)
pop_by_municipality_2016 <- read_excel("dutch_municipality_2016.xlsx")
# as.numeric(pop_by_municipality_2016$Gemeentecode) - pop_by_municipality_2016$CBS_code
pop_by_municipality_2016$statcode <- paste0("GM", pop_by_municipality_2016$Gemeentecode)
# library(tidyverse)
library(sf)
# for plotting
library(extrafont)
library(ggplot2)
library(ggspatial)
library(patchwork)
library(scico)
# library(vapoRwave)
# for data wrangling
library(dplyr)
# Retrieve data with municipal boundaries from PDOK
municipalBoundaries <- st_read("https://geodata.nationaalgeoregister.nl/cbsgebiedsindelingen/wfs?request=GetFeature&service=WFS&version=2.0.0&typeName=cbs_gemeente_2017_gegeneraliseerd&outputFormat=json")
statcode_2017 <- municipalBoundaries$statcode
statcode_2016 <- pop_by_municipality_2016$statcode
not_2017_idx <- statcode_2016 %in% statcode_2016[!(statcode_2016 %in% statcode_2017)]
pop_density_2017 <- pop_by_municipality_2016[!not_2017_idx,]
pop_density_2017 <- select(pop_density_2017, "Municipality_2017", "statcode", "Population_density")
pop_density_2017 <- rbind(pop_density_2017, c("Meierijstad", "GM1948", 439))
pop_density_2017$Population_density <- as.numeric(pop_density_2017$Population_density)
# Find out which columns are available
metadata <- cbs_get_meta("83765NED")
print(metadata$DataProperties$Key)
data_new <-
municipalBoundaries %>%
left_join(pop_density_2017, by=c(statcode="statcode"))
vendor_plot_title <- "Venders of 2016 and 2017, Dutch New Herring" # (with pop. density)"
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.75), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.7, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "aquamarine")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
# this returns transparent png
# png('tr_tst1.png',width=2000,height=2000,units="px",bg = "transparent")
# p
# dev.off()
setwd("D:/GitHub/dutch-new-herring/ours/R-analyze-scripts")
library(dplyr) # not needed, but used in examples below
# library(cbsodataR)
source('./maps.R')
# cbs_toc <- cbs_get_toc()
# datasets <- cbs_get_datasets()
#
# datasets %>%
#   filter(Language == "en") %>% # only English tables
#   select(Identifier, ShortTitle)
#
# regional_key_figures <- cbsodata4::cbs4_get_data("70072ned")
# tmp <- read_delim("dutch_municipality_2016_area.txt",delim = " ")
# print(tmp[,1])
#
# write.csv(tmp[,1], file = 'area.csv',row.names=FALSE)
pop_by_municipality_2016 <- read_excel("dutch_municipality_2016.xlsx")
# as.numeric(pop_by_municipality_2016$Gemeentecode) - pop_by_municipality_2016$CBS_code
pop_by_municipality_2016$statcode <- paste0("GM", pop_by_municipality_2016$Gemeentecode)
# library(tidyverse)
library(sf)
# for plotting
library(extrafont)
library(ggplot2)
library(ggspatial)
library(patchwork)
library(scico)
# library(vapoRwave)
# for data wrangling
library(dplyr)
# Retrieve data with municipal boundaries from PDOK
municipalBoundaries <- st_read("https://geodata.nationaalgeoregister.nl/cbsgebiedsindelingen/wfs?request=GetFeature&service=WFS&version=2.0.0&typeName=cbs_gemeente_2017_gegeneraliseerd&outputFormat=json")
statcode_2017 <- municipalBoundaries$statcode
statcode_2016 <- pop_by_municipality_2016$statcode
not_2017_idx <- statcode_2016 %in% statcode_2016[!(statcode_2016 %in% statcode_2017)]
pop_density_2017 <- pop_by_municipality_2016[!not_2017_idx,]
pop_density_2017 <- select(pop_density_2017, "Municipality_2017", "statcode", "Population_density")
pop_density_2017 <- rbind(pop_density_2017, c("Meierijstad", "GM1948", 439))
pop_density_2017$Population_density <- as.numeric(pop_density_2017$Population_density)
# Find out which columns are available
metadata <- cbs_get_meta("83765NED")
print(metadata$DataProperties$Key)
data_new <-
municipalBoundaries %>%
left_join(pop_density_2017, by=c(statcode="statcode"))
vendor_plot_title <- "Venders of 2016 and 2017, Dutch New Herring" # (with pop. density)"
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.75), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.7, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "aquamarine")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
# this returns transparent png
# png('tr_tst1.png',width=2000,height=2000,units="px",bg = "transparent")
# p
# dev.off()
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.75), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.7, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "aquamarine")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
library(dplyr) # not needed, but used in examples below
# library(cbsodataR)
source('./maps.R')
# cbs_toc <- cbs_get_toc()
# datasets <- cbs_get_datasets()
#
# datasets %>%
#   filter(Language == "en") %>% # only English tables
#   select(Identifier, ShortTitle)
#
# regional_key_figures <- cbsodata4::cbs4_get_data("70072ned")
# tmp <- read_delim("dutch_municipality_2016_area.txt",delim = " ")
# print(tmp[,1])
#
# write.csv(tmp[,1], file = 'area.csv',row.names=FALSE)
pop_by_municipality_2016 <- read_excel("dutch_municipality_2016.xlsx")
# as.numeric(pop_by_municipality_2016$Gemeentecode) - pop_by_municipality_2016$CBS_code
pop_by_municipality_2016$statcode <- paste0("GM", pop_by_municipality_2016$Gemeentecode)
# library(tidyverse)
library(sf)
# for plotting
library(extrafont)
library(ggplot2)
library(ggspatial)
library(patchwork)
library(scico)
# library(vapoRwave)
# for data wrangling
library(dplyr)
# Retrieve data with municipal boundaries from PDOK
municipalBoundaries <- st_read("https://geodata.nationaalgeoregister.nl/cbsgebiedsindelingen/wfs?request=GetFeature&service=WFS&version=2.0.0&typeName=cbs_gemeente_2017_gegeneraliseerd&outputFormat=json")
statcode_2017 <- municipalBoundaries$statcode
statcode_2016 <- pop_by_municipality_2016$statcode
not_2017_idx <- statcode_2016 %in% statcode_2016[!(statcode_2016 %in% statcode_2017)]
pop_density_2017 <- pop_by_municipality_2016[!not_2017_idx,]
pop_density_2017 <- select(pop_density_2017, "Municipality_2017", "statcode", "Population_density")
pop_density_2017 <- rbind(pop_density_2017, c("Meierijstad", "GM1948", 439))
pop_density_2017$Population_density <- as.numeric(pop_density_2017$Population_density)
# Find out which columns are available
metadata <- cbs_get_meta("83765NED")
print(metadata$DataProperties$Key)
data_new <-
municipalBoundaries %>%
left_join(pop_density_2017, by=c(statcode="statcode"))
vendor_plot_title <- "Venders of 2016 and 2017, Dutch New Herring" # (with pop. density)"
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.75), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.7, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "aquamarine")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
dev.off()
# this returns transparent png
# png('tr_tst1.png',width=2000,height=2000,units="px",bg = "transparent")
# p
# dev.off()
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.75), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.7, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "aquamarine")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.75), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.7, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "darkgreen")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.8), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.75, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "darkgreen")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.8), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.8, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "darkgreen")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.75), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.8, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "darkgreen")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.75), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.8, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "cyan")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.75), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.75, size = 1.8, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "cyan")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p
# Create a thematic map
p <-
data_new %>%
ggplot() +
geom_sf(aes(fill = Population_density)) +
# geom_sf() +
# scale_fill_viridis_c("pop. density\nby municipality", option = "A") +
scale_fill_gradient("pop. density\nby municipality",trans = "log",
low = alpha("white",0.5), high = alpha("black",0.75), guide = "colorbar")+
geom_sf(aes(shape=year,color=year), alpha = 0.75, size = 1.7, # shape = 20,
data = vendors_loc_sf) +
# scale_shape_manual(values = c(15, 16)) +
scale_color_manual(values = c("darkred", "cyan")) +
# geom_point(data = ours.maps.df, aes(x = lon, y = lat), size = 4,
#            shape = 23, fill = "darkred")+
labs(title = vendor_plot_title, fill = "") +
theme_void()
p

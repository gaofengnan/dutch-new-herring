install.packages("languageserver")
install.packages("languageserver")
install.packages("cowplot")
help("arrange")
??arrang
1093.29/154.59
ratio <- 1093.29/154.59
ratio * 9.59
qnorm(1.896)
help(qnorm)
pnorm(1.796)
pnorm(1.96)
qnorm(0.05)
install.packages("ggmap")
setwd("~/GitHub/dutch-new-herring/ours/R-analyze-scripts")
library(ggmap)
library(ggmap)
get_map("Durham North Carolina", maptype = "roadmap", zoom = 10)
register_google()
ggmap::register_google()
rlang::last_error()
register_google("AIzaSyAcslRUc1TQ-SX3ewPj-E7djJF48kWvXQs")
get_map("Durham North Carolina", maptype = "roadmap", zoom = 10)
get_map("Durham North Carolina", maptype = "roadmap", zoom = 10)
ggmap()
map()
help("ggmap")
library(ggmap)
t <- get_map("Durham North Carolina", maptype = "roadmap", zoom = 10)
ggmap(t)
ggmap(t)
library(ggmap)
t <- get_map("Durham North Carolina", maptype = "roadmap", source="osm",
zoom = 10)
library(ggmap)
t <- get_map("Durham North Carolina", maptype = "hybrid",
zoom = 10)
library(ggmap)
t <- get_map("Durham North Carolina", maptype = "hybrid",
zoom = 10)
ggmap(t)
library(ggmap)
t <- get_map("Netherlands", maptype = "hybrid",
zoom = 10)
ggmap(t)
library(ggmap)
t <- get_map("Netherlands", maptype = "hybrid",
zoom = "auto")
ggmap(t)
install.packages("tmap")
library(tmap)
tmap_mode("plot")
tm_shape(World) +
tm_polygons("HPI") +
tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))
install.packages("sf")
library(ggmap)
t <- get_map("Leiden", maptype = "toner",
zoom = "auto")
ggmap(t)
library(ggmap)
t <- get_map("Netherlands", maptype = "toner",
zoom = "auto")
ggmap(t)
install.packages("tidygeocoder")
t <- get_map("Netherlands", source="google"
zoom = "auto")
library(ggmap)
t <- get_map("Netherlands", source="google",
zoom = "auto")
ggmap(t)
library(ggmap)
t <- get_map("Leiden", source="google",
zoom = "auto")
ggmap(t)
source("~/GitHub/dutch-new-herring/ours/R-analyze-scripts/maps.R", echo=TRUE)
library(ggmap)
geocode("van swietenstratt, leiden")
?geocode
ggmap::geocode("van swietenstraat, leiden")
ggmap_show_api_key()
ggmap::geocode("van swietenstraat, leiden, netherlands")
ggmap::geocode("van swietenstraat 45, leiden, netherlands")
library(maps)
map("state", fill = TRUE, col = rainbow(209),
mar = c(0, 0, 2, 0))
install.packages("maps")
library(maps)
map("state", fill = TRUE, col = rainbow(209),
mar = c(0, 0, 2, 0))
library(maps)
map("state", region=c('new york'), fill = TRUE, col = rainbow(209),
mar = c(0, 0, 2, 0))
library(maps)
map("state", fill = TRUE, col = rainbow(209),
mar = c(0, 0, 2, 0))
title("美国地图")
library(maps)
library(maps)
map('state', region = c('new york', 'new jersey', 'penn'),
fill = TRUE, col = rainbow(3), mar = c(2, 3, 4, 3))
title("美国三州地图")
help(maps)
??maps
maps::map(database="netherlands")
maps::map(database="world", region=c('Netherlands'))
install.packages("mapdata")
library(maps)
library(mapdata)
map("netherlands", col = "red4", ylim = c(18, 54), panel.first = grid())
library(mapdata)
map("china", col = "red4", ylim = c(18, 54), panel.first = grid())
title(" Netherlands Map")
library(ggmap)
t <- get_map("Leiden", source="google",
zoom = 4)
ggmap(t)
library(ggmap)
t <- get_map("Netherlands", source="google",
zoom = 7)
ggmap(t)
library(ggmap)
t <- get_map("Netherlands", source="google", maptype = "hybrid"
zoom = 7)
library(ggmap)
t <- get_map("Netherlands", source="google", maptype = "hybrid",
zoom = 7)
ggmap(t)
library(ggmap)
t <- get_map("Netherlands", source="google", maptype = "watercolor",
zoom = 7)
ggmap(t)
library(ggmap)
t <- get_map("Netherlands", source="google", maptype = "terrain-lines",
zoom = 7)
ggmap(t)
library(ggmap)
t <- get_map("Netherlands", source="google", maptype = "terrain-lines",
zoom = 8)
ggmap(t)
rm(list = ls())
# detach(ours.df)
# setwd("~/Dropbox/fengnan_richard/code")
# setwd("/Users/richardgill/Desktop/Haring/code")
library(readxl)
library(tidyverse)
source('./ancillary.R')
ours.df <- read_excel("ours.xlsx")
ours.df <- arrange(ours.df, vollaard_id)
names(ours.df)
str(ours.df)
attach(ours.df)
table(Repeat)
Repeat[is.na(Repeat)] <- "_"
table(Repeat)
final_score <- eindcijfer
weight <- weight
temp <- temp
temp_cat <- cut(temp, breaks = c(-3, 7, 10, 20), right = TRUE)
fat <- fat_percentage
fat_cat <-cut(fat_percentage, c(0, 10, 14, 20), right = TRUE)
price <- price_per_100g
price_cat <- cut(ours.df$price_per_100g, breaks = c(1, 2.84, 3.48, 5.1 ), right = TRUE)
freshly_cleaned <- vers_van_het_mes
freshly_cleaned[freshly_cleaned == "Ja"] <- "Yes"
freshly_cleaned[freshly_cleaned == "Nee"] <- "No"
freshly_cleaned <- factor(freshly_cleaned, levels = c("No", "Yes"))
micro[micro == "Zeer goed"] <- "Goed"
micro[micro == "Goed"] <- "Good"
micro[micro == "Voldoende"] <- "Sufficient"
micro[micro == "Slecht"] <- "Bad"
micro[micro == "Waarschuwingsfase"] <- "Warning"
micro[micro == "Afkeurenswaardig"] <- "Danger"
micro[micro == "Afgekeurd"] <- "Danger"
micro <- factor(micro, levels = c("Good", "Sufficient", "Bad", "Warning", "Danger"))
ripeness[ripeness == "Groen"] <- "Green"
ripeness[ripeness == "Licht"] <- "Light"
ripeness[ripeness == "Gemiddeld"] <- "Average"
ripeness[ripeness == "Sterk"] <- "Strong"
ripeness[ripeness == "Bedorven"] <- "Rotten"
ripeness <- factor(ripeness, levels = c("Light", "Average", "Green", "Strong", "Rotten")) # light is the reference category of Vollaard
cleaning <- cleanness
cleaning[cleaning == "Zeer goed"] <- "Very good"
cleaning[cleaning == "Goed"] <- "Good"
cleaning[cleaning == "Matig"] <- "Poor"
cleaning[cleaning == "Slecht"] <- "Bad"
cleaning <- factor(cleaning, levels = c("Very good", "Good", "Poor", "Bad"))
summary(weight)
str(weight)
summary(temp)
table(temp_cat)
str(temp_cat)
summary(fat)
table(fat_cat)
str(fat_cat)
summary(price)
table(price_cat)
str(price_cat)
table(freshly_cleaned)
str(freshly_cleaned)
table(micro)
str(micro)
table(ripeness)
str(ripeness)
table(cleaning)
str(cleaning)
